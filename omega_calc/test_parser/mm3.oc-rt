# Omega Calculator v2.1 (based on Omega Library 2.1, July, 2008):
# #
# # Various tests of mmap utilities
# #
# symbolic N, M;
# 
# 
# IS1 := {[1,i,1,0,1]   : 0 <= i < N};
# 
# MM1 := {[1,i,1,0,1]->[i]} restrictDomain IS1;
# 
# 
# IS2 := {[2,i,1,j,1] : 0 <= i < N and 0 <= j < M};
# 
# MM2 := {[2,i,1,j,1] -> [i,j]} restrictDomain IS2;
# 
# DF  := {[1,i,1,0,1] -> [2,i,1,j,1] : 0 <= i < N and 0 <= j < M};
# 
# 
# tcodegen
# 	["w=0",  IS1, "x", MM1],
# 	["w=r1", IS2, "y", MM2, [1, DF]]
# given {[] : N,M > 7};
#define s1(t1,t2,t3,t4,t5)	w=0
#define s2(t1,t2,t3,t4,t5)	x[(t2)] = w
#define s3(t1,t2,t3,t4,t5)	r1 = x[(t2)]
#define s4(t1,t2,t3,t4,t5)	w=r1
#define s5(t1,t2,t3,t4,t5)	y[(t2)][(t4)] = w
for(t2 = 0; t2 <= N-1; t2++) {
  s1(1,t2,1,0,1);
  s2(1,t2,1,0,1);
}
for(t2 = 0; t2 <= N-1; t2++) {
  for(t4 = 0; t4 <= M-1; t4++) {
    s3(2,t2,1,t4,1);
    s4(2,t2,1,t4,1);
    s5(2,t2,1,t4,1);
  }
}

# 
# 
# 
# #
# # Test transformation
# #
# 
# Trans := {[2,i,1,j,1] -> [2,j,1,i,1]} union {[1,i,1,0,1] -> [1,i,1,5,1]};
# 
# 
# tcodegen
# 	trans-is Trans
# 	["w=0",  IS1, "x", MM1],
# 	["w=r1", IS2, "y", MM2, [1, DF]]
# given {[] : N,M > 7};
#define s1(t1,t2,t3,t4,t5)	w=0
#define s2(t1,t2,t3,t4,t5)	x[(t2)] = w
#define s3(t1,t2,t3,t4,t5)	r1 = x[(t4)]
#define s4(t1,t2,t3,t4,t5)	w=r1
#define s5(t1,t2,t3,t4,t5)	y[(t4)][(t2)] = w
for(t2 = 0; t2 <= N-1; t2++) {
  s1(1,t2,1,5,1);
  s2(1,t2,1,5,1);
}
for(t2 = 0; t2 <= M-1; t2++) {
  for(t4 = 0; t4 <= N-1; t4++) {
    s3(2,t2,1,t4,1);
    s4(2,t2,1,t4,1);
    s5(2,t2,1,t4,1);
  }
}

# 
# 
# 
# 
# #
# # Test peeling - try peeling one IS one time
# # Ultimately, it would be nice if this didn't split up the 2nd loop.
# # Note that, when peeling, the computation runs faster if you don't
# #  "over-specify" the peel conditions - no unnecessary equality constraints
# #
# 
# tcodegen
# 	peel-is 1 2 {[a,i,c,d,e] : i <= 2}
# 	trans-is Trans
# 	["w=0",  IS1, "x", MM1],
# 	["w=r1", IS2, "y", MM2, [1, DF]]
# given {[] : N,M > 7};
#define s1(t1,t2,t3,t4,t5,t6)	w=0
#define s2(t1,t2,t3,t4,t5,t6)	x[(t3)] = w
#define s3(t1,t2,t3,t4,t5,t6)	w=0
#define s4(t1,t2,t3,t4,t5,t6)	x[(t3)] = w
#define s5(t1,t2,t3,t4,t5,t6)	r1 = x[(t5)]
#define s6(t1,t2,t3,t4,t5,t6)	r1 = x[(t5)]
#define s7(t1,t2,t3,t4,t5,t6)	w=r1
#define s8(t1,t2,t3,t4,t5,t6)	y[(t5)][(t3)] = w
for(t3 = 0; t3 <= 2; t3++) {
  s1(1,0,t3,1,5,1);
  s2(1,0,t3,1,5,1);
}
for(t3 = 3; t3 <= N-1; t3++) {
  s3(1,1,t3,1,5,1);
  s4(1,1,t3,1,5,1);
}
for(t3 = 0; t3 <= M-1; t3++) {
  for(t5 = 0; t5 <= 2; t5++) {
    s5(2,-1,t3,1,t5,1);
    s7(2,-1,t3,1,t5,1);
    s8(2,-1,t3,1,t5,1);
  }
  for(t5 = 3; t5 <= N-1; t5++) {
    s6(2,-1,t3,1,t5,1);
    s7(2,-1,t3,1,t5,1);
    s8(2,-1,t3,1,t5,1);
  }
}

# 
# 
# 
# #
# # Test peeling again - try peeling one IS twice
# #
# 
# tcodegen
# 	peel-is 2 3 {[a,ip,i,c,d,e] : 2 < i <= N-3}
# 	peel-is 1 2 {[a,i,c,d,e] : i <= 2}
# 	trans-is Trans
# 	["w=0",  IS1, "x", MM1],
# 	["w=r1", IS2, "y", MM2, [1, DF]]
# given {[] : N,M > 7};
#define s1(t1,t2,t3,t4,t5,t6,t7)	w=0
#define s2(t1,t2,t3,t4,t5,t6,t7)	x[(t4)] = w
#define s3(t1,t2,t3,t4,t5,t6,t7)	w=0
#define s4(t1,t2,t3,t4,t5,t6,t7)	x[(t4)] = w
#define s5(t1,t2,t3,t4,t5,t6,t7)	w=0
#define s6(t1,t2,t3,t4,t5,t6,t7)	x[(t4)] = w
#define s7(t1,t2,t3,t4,t5,t6,t7)	r1 = x[(t6)]
#define s8(t1,t2,t3,t4,t5,t6,t7)	r1 = x[(t6)]
#define s9(t1,t2,t3,t4,t5,t6,t7)	r1 = x[(t6)]
#define s10(t1,t2,t3,t4,t5,t6,t7)	w=r1
#define s11(t1,t2,t3,t4,t5,t6,t7)	y[(t6)][(t4)] = w
for(t4 = 0; t4 <= 2; t4++) {
  s1(1,0,-1,t4,1,5,1);
  s2(1,0,-1,t4,1,5,1);
}
for(t4 = 3; t4 <= N-3; t4++) {
  s3(1,1,0,t4,1,5,1);
  s4(1,1,0,t4,1,5,1);
}
for(t4 = N-2; t4 <= N-1; t4++) {
  s5(1,1,1,t4,1,5,1);
  s6(1,1,1,t4,1,5,1);
}
for(t4 = 0; t4 <= M-1; t4++) {
  for(t6 = 0; t6 <= 2; t6++) {
    s7(2,-1,-1,t4,1,t6,1);
    s10(2,-1,-1,t4,1,t6,1);
    s11(2,-1,-1,t4,1,t6,1);
  }
  for(t6 = 3; t6 <= N-3; t6++) {
    s8(2,-1,-1,t4,1,t6,1);
    s10(2,-1,-1,t4,1,t6,1);
    s11(2,-1,-1,t4,1,t6,1);
  }
  for(t6 = N-2; t6 <= N-1; t6++) {
    s9(2,-1,-1,t4,1,t6,1);
    s10(2,-1,-1,t4,1,t6,1);
    s11(2,-1,-1,t4,1,t6,1);
  }
}

# 
# 
# 
# #
# # Test peeling again - try peeling one IS twice the easy way
# #
# 
# tcodegen
# 	peel-is 1 2 {[a,i,c,d,e] : i <= 2} , {[a,i,c,d,e] : i > 2,N-3}
# 	trans-is Trans
# 	["w=0",  IS1, "x", MM1],
# 	["w=r1", IS2, "y", MM2, [1, DF]]
# given {[] : N,M > 7};
#define s1(t1,t2,t3,t4,t5,t6)	w=0
#define s2(t1,t2,t3,t4,t5,t6)	x[(t3)] = w
#define s3(t1,t2,t3,t4,t5,t6)	w=0
#define s4(t1,t2,t3,t4,t5,t6)	x[(t3)] = w
#define s5(t1,t2,t3,t4,t5,t6)	w=0
#define s6(t1,t2,t3,t4,t5,t6)	x[(t3)] = w
#define s7(t1,t2,t3,t4,t5,t6)	r1 = x[(t5)]
#define s8(t1,t2,t3,t4,t5,t6)	r1 = x[(t5)]
#define s9(t1,t2,t3,t4,t5,t6)	r1 = x[(t5)]
#define s10(t1,t2,t3,t4,t5,t6)	w=r1
#define s11(t1,t2,t3,t4,t5,t6)	y[(t5)][(t3)] = w
for(t3 = 0; t3 <= 2; t3++) {
  s1(1,0,t3,1,5,1);
  s2(1,0,t3,1,5,1);
}
for(t3 = 3; t3 <= N-3; t3++) {
  s3(1,1,t3,1,5,1);
  s4(1,1,t3,1,5,1);
}
for(t3 = N-2; t3 <= N-1; t3++) {
  s5(1,2,t3,1,5,1);
  s6(1,2,t3,1,5,1);
}
for(t3 = 0; t3 <= M-1; t3++) {
  for(t5 = 0; t5 <= 2; t5++) {
    s7(2,-1,t3,1,t5,1);
    s10(2,-1,t3,1,t5,1);
    s11(2,-1,t3,1,t5,1);
  }
  for(t5 = 3; t5 <= N-3; t5++) {
    s8(2,-1,t3,1,t5,1);
    s10(2,-1,t3,1,t5,1);
    s11(2,-1,t3,1,t5,1);
  }
  for(t5 = N-2; t5 <= N-1; t5++) {
    s9(2,-1,t3,1,t5,1);
    s10(2,-1,t3,1,t5,1);
    s11(2,-1,t3,1,t5,1);
  }
}

# 
# 
# 
# #
# # Test peeling again - try peeling 2nd IS's outer loop
# # This produces two doubly-nested loops
# #
# 
# tcodegen
# 	peel-is 2 2 {[a,j,c,d,e] : j <= 5}
# 	trans-is Trans
# 	["w=0",  IS1, "x", MM1],
# 	["w=r1", IS2, "y", MM2, [1, DF]]
# given {[] : N,M > 7};
#define s1(t1,t2,t3,t4,t5,t6)	w=0
#define s2(t1,t2,t3,t4,t5,t6)	x[(t3)] = w
#define s3(t1,t2,t3,t4,t5,t6)	r1 = x[(t5)]
#define s4(t1,t2,t3,t4,t5,t6)	w=r1
#define s5(t1,t2,t3,t4,t5,t6)	y[(t5)][(t3)] = w
#define s6(t1,t2,t3,t4,t5,t6)	r1 = x[(t5)]
#define s7(t1,t2,t3,t4,t5,t6)	w=r1
#define s8(t1,t2,t3,t4,t5,t6)	y[(t5)][(t3)] = w
for(t3 = 0; t3 <= N-1; t3++) {
  s1(1,-1,t3,1,5,1);
  s2(1,-1,t3,1,5,1);
}
for(t3 = 0; t3 <= 5; t3++) {
  for(t5 = 0; t5 <= N-1; t5++) {
    s3(2,0,t3,1,t5,1);
    s4(2,0,t3,1,t5,1);
    s5(2,0,t3,1,t5,1);
  }
}
for(t3 = 6; t3 <= M-1; t3++) {
  for(t5 = 0; t5 <= N-1; t5++) {
    s6(2,1,t3,1,t5,1);
    s7(2,1,t3,1,t5,1);
    s8(2,1,t3,1,t5,1);
  }
}

# 
# 
# 
# 
# #
# # Test peeling again - try peeling 2nd IS's inner loop
# # This produces two i loops both together inside the j loop
# #
# 
# tcodegen
# 	peel-is 2 4 {[a,b,c,i,e] : i <= 5}
# 	trans-is Trans
# 	["w=0",  IS1, "x", MM1],
# 	["w=r1", IS2, "y", MM2, [1, DF]]
# given {[] : N,M > 7};
#define s1(t1,t2,t3,t4,t5,t6)	w=0
#define s2(t1,t2,t3,t4,t5,t6)	x[(t2)] = w
#define s3(t1,t2,t3,t4,t5,t6)	r1 = x[(t5)]
#define s4(t1,t2,t3,t4,t5,t6)	w=r1
#define s5(t1,t2,t3,t4,t5,t6)	y[(t5)][(t2)] = w
#define s6(t1,t2,t3,t4,t5,t6)	r1 = x[(t5)]
#define s7(t1,t2,t3,t4,t5,t6)	w=r1
#define s8(t1,t2,t3,t4,t5,t6)	y[(t5)][(t2)] = w
for(t2 = 0; t2 <= N-1; t2++) {
  s1(1,t2,1,-1,5,1);
  s2(1,t2,1,-1,5,1);
}
for(t2 = 0; t2 <= M-1; t2++) {
  for(t5 = 0; t5 <= 5; t5++) {
    s3(2,t2,1,0,t5,1);
    s4(2,t2,1,0,t5,1);
    s5(2,t2,1,0,t5,1);
  }
  for(t5 = 6; t5 <= N-1; t5++) {
    s6(2,t2,1,1,t5,1);
    s7(2,t2,1,1,t5,1);
    s8(2,t2,1,1,t5,1);
  }
}

# 
# 
# 
# #
# # Final peeling test - put it all together and see what happens
# #
# 
# tcodegen
# 	peel-is 5 6 {[a,no,no,b,c,i,e] : i <= 5}
# 	peel-is 4 3 {[a,no,j,c,d,e] : j <= 5}
# 	peel-is 1 2 {[a,i,c,d,e] : i <= 2} , {[a,i,c,d,e] : i > 2,N-3}
# 	trans-is Trans
# 	["w=0",  IS1, "x", MM1],
# 	["w=r1", IS2, "y", MM2, [1, DF]]
# given {[] : N,M > 7};
#define s1(t1,t2,t3,t4,t5,t6,t7,t8)	w=0
#define s2(t1,t2,t3,t4,t5,t6,t7,t8)	x[(t4)] = w
#define s3(t1,t2,t3,t4,t5,t6,t7,t8)	w=0
#define s4(t1,t2,t3,t4,t5,t6,t7,t8)	x[(t4)] = w
#define s5(t1,t2,t3,t4,t5,t6,t7,t8)	w=0
#define s6(t1,t2,t3,t4,t5,t6,t7,t8)	x[(t4)] = w
#define s7(t1,t2,t3,t4,t5,t6,t7,t8)	r1 = x[(t7)]
#define s8(t1,t2,t3,t4,t5,t6,t7,t8)	r1 = x[(t7)]
#define s9(t1,t2,t3,t4,t5,t6,t7,t8)	r1 = x[(t7)]
#define s10(t1,t2,t3,t4,t5,t6,t7,t8)	w=r1
#define s11(t1,t2,t3,t4,t5,t6,t7,t8)	y[(t7)][(t4)] = w
#define s12(t1,t2,t3,t4,t5,t6,t7,t8)	r1 = x[(t7)]
#define s13(t1,t2,t3,t4,t5,t6,t7,t8)	r1 = x[(t7)]
#define s14(t1,t2,t3,t4,t5,t6,t7,t8)	r1 = x[(t7)]
#define s15(t1,t2,t3,t4,t5,t6,t7,t8)	r1 = x[(t7)]
#define s16(t1,t2,t3,t4,t5,t6,t7,t8)	r1 = x[(t7)]
#define s17(t1,t2,t3,t4,t5,t6,t7,t8)	w=r1
#define s18(t1,t2,t3,t4,t5,t6,t7,t8)	y[(t7)][(t4)] = w
#define s19(t1,t2,t3,t4,t5,t6,t7,t8)	y[(t7)][(t4)] = w
for(t4 = 0; t4 <= 2; t4++) {
  s1(1,0,-1,t4,1,-1,5,1);
  s2(1,0,-1,t4,1,-1,5,1);
}
for(t4 = 3; t4 <= N-3; t4++) {
  s3(1,1,-1,t4,1,-1,5,1);
  s4(1,1,-1,t4,1,-1,5,1);
}
for(t4 = N-2; t4 <= N-1; t4++) {
  s5(1,2,-1,t4,1,-1,5,1);
  s6(1,2,-1,t4,1,-1,5,1);
}
for(t4 = 0; t4 <= 5; t4++) {
  for(t7 = 0; t7 <= 2; t7++) {
    s7(2,-1,0,t4,1,-1,t7,1);
    s10(2,-1,0,t4,1,-1,t7,1);
    s11(2,-1,0,t4,1,-1,t7,1);
  }
  for(t7 = 3; t7 <= N-3; t7++) {
    s8(2,-1,0,t4,1,-1,t7,1);
    s10(2,-1,0,t4,1,-1,t7,1);
    s11(2,-1,0,t4,1,-1,t7,1);
  }
  for(t7 = N-2; t7 <= N-1; t7++) {
    s9(2,-1,0,t4,1,-1,t7,1);
    s10(2,-1,0,t4,1,-1,t7,1);
    s11(2,-1,0,t4,1,-1,t7,1);
  }
}
for(t4 = 6; t4 <= M-1; t4++) {
  for(t7 = 0; t7 <= 2; t7++) {
    s12(2,-1,1,t4,1,1,t7,1);
    s17(2,-1,1,t4,1,1,t7,1);
    s19(2,-1,1,t4,1,1,t7,1);
  }
  for(t7 = 3; t7 <= 5; t7++) {
    s14(2,-1,1,t4,1,1,t7,1);
    s17(2,-1,1,t4,1,1,t7,1);
    s19(2,-1,1,t4,1,1,t7,1);
  }
  for(t7 = 6; t7 <= N-3; t7++) {
    s13(2,-1,1,t4,1,1,t7,1);
    s17(2,-1,1,t4,1,1,t7,1);
    s18(2,-1,1,t4,1,1,t7,1);
  }
  for(t7 = N-2; t7 <= N-1; t7++) {
    s15(2,-1,1,t4,1,1,t7,1);
    s17(2,-1,1,t4,1,1,t7,1);
    s18(2,-1,1,t4,1,1,t7,1);
  }
}

# 
# 
# 
# #
# # Test unrolling of inner loop
# #
# 
# tcodegen
# 	unroll-is 2 4 4
# 	trans-is Trans
# 	["w=0",  IS1, "x", MM1],
# 	["w=r1", IS2, "y", MM2, [1, DF]]
# given {[] : N,M > 7 and exists (n,m : N=4n and M=4m)};
#define s1(t1,t2,t3,t4,t5,t6)	w=0
#define s2(t1,t2,t3,t4,t5,t6)	x[(t2)] = w
#define s3(t1,t2,t3,t4,t5,t6)	r1 = x[4*(t4)]
#define s4(t1,t2,t3,t4,t5,t6)	w=r1
#define s5(t1,t2,t3,t4,t5,t6)	y[4*(t4)][(t2)] = w
#define s6(t1,t2,t3,t4,t5,t6)	r1 = x[4*(t4)+1]
#define s7(t1,t2,t3,t4,t5,t6)	w=r1
#define s8(t1,t2,t3,t4,t5,t6)	y[4*(t4)+1][(t2)] = w
#define s9(t1,t2,t3,t4,t5,t6)	r1 = x[4*(t4)+2]
#define s10(t1,t2,t3,t4,t5,t6)	w=r1
#define s11(t1,t2,t3,t4,t5,t6)	y[4*(t4)+2][(t2)] = w
#define s12(t1,t2,t3,t4,t5,t6)	r1 = x[4*(t4)+3]
#define s13(t1,t2,t3,t4,t5,t6)	w=r1
#define s14(t1,t2,t3,t4,t5,t6)	y[4*(t4)+3][(t2)] = w
for(t2 = 0; t2 <= N-1; t2++) {
  s1(1,t2,1,5,-1,1);
  s2(1,t2,1,5,-1,1);
}
for(t2 = 0; t2 <= M-1; t2++) {
  for(t4 = 0; t4 <= intDiv(N-4,4); t4++) {
    s3(2,t2,1,t4,0,1);
    s4(2,t2,1,t4,0,1);
    s5(2,t2,1,t4,0,1);
    s6(2,t2,1,t4,1,1);
    s7(2,t2,1,t4,1,1);
    s8(2,t2,1,t4,1,1);
    s9(2,t2,1,t4,2,1);
    s10(2,t2,1,t4,2,1);
    s11(2,t2,1,t4,2,1);
    s12(2,t2,1,t4,3,1);
    s13(2,t2,1,t4,3,1);
    s14(2,t2,1,t4,3,1);
  }
}

# 
# 
# #
# # Test unrolling of outer loop
# #
# 
# tcodegen
# 	unroll-is 2 2 4
# 	trans-is Trans
# 	["w=0",  IS1, "x", MM1],
# 	["w=r1", IS2, "y", MM2, [1, DF]]
# given {[] : N,M > 7 and exists (n,m : N=4n and M=4m)};
#define s1(t1,t2,t3,t4,t5,t6)	w=0
#define s2(t1,t2,t3,t4,t5,t6)	x[(t2)] = w
#define s3(t1,t2,t3,t4,t5,t6)	r1 = x[(t5)]
#define s4(t1,t2,t3,t4,t5,t6)	w=r1
#define s5(t1,t2,t3,t4,t5,t6)	y[(t5)][4*(t2)] = w
#define s6(t1,t2,t3,t4,t5,t6)	r1 = x[(t5)]
#define s7(t1,t2,t3,t4,t5,t6)	w=r1
#define s8(t1,t2,t3,t4,t5,t6)	y[(t5)][4*(t2)+1] = w
#define s9(t1,t2,t3,t4,t5,t6)	r1 = x[(t5)]
#define s10(t1,t2,t3,t4,t5,t6)	w=r1
#define s11(t1,t2,t3,t4,t5,t6)	y[(t5)][4*(t2)+2] = w
#define s12(t1,t2,t3,t4,t5,t6)	r1 = x[(t5)]
#define s13(t1,t2,t3,t4,t5,t6)	w=r1
#define s14(t1,t2,t3,t4,t5,t6)	y[(t5)][4*(t2)+3] = w
for(t2 = 0; t2 <= N-1; t2++) {
  s1(1,t2,-1,1,5,1);
  s2(1,t2,-1,1,5,1);
}
for(t2 = 0; t2 <= intDiv(M-4,4); t2++) {
  for(t5 = 0; t5 <= N-1; t5++) {
    s3(2,t2,0,1,t5,1);
    s4(2,t2,0,1,t5,1);
    s5(2,t2,0,1,t5,1);
  }
  for(t5 = 0; t5 <= N-1; t5++) {
    s6(2,t2,1,1,t5,1);
    s7(2,t2,1,1,t5,1);
    s8(2,t2,1,1,t5,1);
  }
  for(t5 = 0; t5 <= N-1; t5++) {
    s9(2,t2,2,1,t5,1);
    s10(2,t2,2,1,t5,1);
    s11(2,t2,2,1,t5,1);
  }
  for(t5 = 0; t5 <= N-1; t5++) {
    s12(2,t2,3,1,t5,1);
    s13(2,t2,3,1,t5,1);
    s14(2,t2,3,1,t5,1);
  }
}

# 
# 
# #
# # Test unrolling of inner loop in more general case
# #
# 
# tcodegen
# 	unroll-is 2 4 4
# 	trans-is Trans
# 	["w=0",  IS1, "x", MM1],
# 	["w=r1", IS2, "y", MM2, [1, DF]]
# given {[] : N,M > 7};
#define s1(t1,t2,t3,t4,t5,t6)	w=0
#define s2(t1,t2,t3,t4,t5,t6)	x[(t2)] = w
#define s3(t1,t2,t3,t4,t5,t6)	r1 = x[4*(t4)]
#define s4(t1,t2,t3,t4,t5,t6)	w=r1
#define s5(t1,t2,t3,t4,t5,t6)	y[4*(t4)][(t2)] = w
#define s6(t1,t2,t3,t4,t5,t6)	r1 = x[4*(t4)+1]
#define s7(t1,t2,t3,t4,t5,t6)	w=r1
#define s8(t1,t2,t3,t4,t5,t6)	y[4*(t4)+1][(t2)] = w
#define s9(t1,t2,t3,t4,t5,t6)	r1 = x[4*(t4)+2]
#define s10(t1,t2,t3,t4,t5,t6)	w=r1
#define s11(t1,t2,t3,t4,t5,t6)	y[4*(t4)+2][(t2)] = w
#define s12(t1,t2,t3,t4,t5,t6)	r1 = x[4*(t4)+3]
#define s13(t1,t2,t3,t4,t5,t6)	w=r1
#define s14(t1,t2,t3,t4,t5,t6)	y[4*(t4)+3][(t2)] = w
for(t2 = 0; t2 <= N-1; t2++) {
  s1(1,t2,1,5,-1,1);
  s2(1,t2,1,5,-1,1);
}
for(t2 = 0; t2 <= M-1; t2++) {
  for(t4 = 0; t4 <= intDiv(N-4,4); t4++) {
    s3(2,t2,1,t4,0,1);
    s4(2,t2,1,t4,0,1);
    s5(2,t2,1,t4,0,1);
    s6(2,t2,1,t4,1,1);
    s7(2,t2,1,t4,1,1);
    s8(2,t2,1,t4,1,1);
    s9(2,t2,1,t4,2,1);
    s10(2,t2,1,t4,2,1);
    s11(2,t2,1,t4,2,1);
    s12(2,t2,1,t4,3,1);
    s13(2,t2,1,t4,3,1);
    s14(2,t2,1,t4,3,1);
  }
  t4=intDiv(N,4);
  s3(2,t2,1,t4,0,1);
  s4(2,t2,1,t4,0,1);
  s5(2,t2,1,t4,0,1);
  s6(2,t2,1,t4,1,1);
  s7(2,t2,1,t4,1,1);
  s8(2,t2,1,t4,1,1);
  s9(2,t2,1,t4,2,1);
  s10(2,t2,1,t4,2,1);
  s11(2,t2,1,t4,2,1);
  t4=intDiv(N+1,4);
  s3(2,t2,1,t4,0,1);
  s4(2,t2,1,t4,0,1);
  s5(2,t2,1,t4,0,1);
  s6(2,t2,1,t4,1,1);
  s7(2,t2,1,t4,1,1);
  s8(2,t2,1,t4,1,1);
  t4=intDiv(N+2,4);
  s3(2,t2,1,t4,0,1);
  s4(2,t2,1,t4,0,1);
  s5(2,t2,1,t4,0,1);
}

# 
